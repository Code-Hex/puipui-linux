#!/bin/bash
# vim: set ts=4:
#---help---
# Usage: puipui-linux-tool [options]
#
# This script builds puipui linux kernel and it's initramfs.
#
# Options:
#   -u Only updates linux kernel config files. it does not build kernel or initramfs.
#---help---

set -eu

version=0.0.1

srcdir="$PWD"
target_arch="aarch64 x86_64"
kernver=5.15.71
busyboxver=1.35.0
name="PUI PUI Linux"

#if [ -z "$SOURCE_DATE_EPOCH" ]; then
	SOURCE_DATE_EPOCH=$(date -u "+%s")
#fi

msg() { echo -e "\033]2; $*\007\n=== $*"; }

usage() {
	sed -En '/^#---help---/,/^#---help---/p' "$0" | sed -E 's/^# ?//; 1d;$d;'
}

fetch() {
	local url="$1"
        local archive=${url##*/}
        (cd $srcdir && curl -OL $url)
        tar -xvf "$srcdir"/"$archive" -C "$srcdir"
}

_kernelarch() {
	local arch="$1"
	if [ $arch == aarch64 ]; then
		echo arm64
	elif [ $arch == x86_64 ]; then
		echo x86
	else echo "Unknown TARGET $arch"; exit 1;
	fi
}

_kconfig() {
	local fname="$1"
	echo "kconfig/$fname"
}

_builddir() {
	local arch="$1"
	local dirname="$2"
	echo "$srcdir"/build-$arch/$dirname
}

_artifact() {
	local arch="$1"
	_builddir $arch "artifact"
}

_cross_compile_target() {
	local arch="$1"
	echo $arch-linux-musl-
}

_musl_path() {
	local arch="$1"
	local machine_arch="$(uname -m)"
	if [ $arch == $machine_arch ]; then
		echo $arch-linux-musl-native
	else
		echo $arch-linux-musl-cross
	fi
}

setup_musl_path() {
	local arch="$1"
	local musl_path="$(_musl_path $arch)"
	local musl_abs_path="$srcdir/$musl_path"
	local musl_prefix="$arch-linux-musl-"
	local machine_arch="$(uname -m)"
	if [ "aarch64" == $machine_arch ]; then
		fetch "https://github.com/Code-Hex/musl-cross-make-arm64/releases/download/v0.0.1/${musl_path}.tar.gz"
		tar xvf "$musl_abs_path.tar.gz"
	else
		fetch "https://musl.cc/${musl_path}.tgz"
		tar xvf "$musl_abs_path.tgz"
		ln -s $musl_abs_path/bin/{strip,"${musl_prefix}strip"}
	fi
}

_prepareconfig() {
	local _arch="$1"
	local _config=$(_kconfig $_arch.config)
	local _builddir=$(_builddir $_arch linux-kernel)
	mkdir -p "$_builddir"

	local PATH="$srcdir/$(_musl_path $_arch)/bin:$PATH"
	cp "$srcdir"/$_config "$_builddir"/.config
	msg "Configuring $name kernel ($_arch)"
	make -C "$srcdir"/linux-$kernver \
		CROSS_COMPILE=$(_cross_compile_target $_arch) \
		O="$_builddir" \
		ARCH="$(_kernelarch $_arch)" \
		olddefconfig
}

build_kern() {
	unset LDFLAGS
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
	for _arch in $target_arch; do
		_prepareconfig "$_arch"
	done
	for _arch in $target_arch; do
		msg "Building $_arch $name kernel"

		# Target validation
		if [ $_arch == aarch64 ]; then
			VMLINUX=arch/arm64/boot/Image.gz
		elif [ $_arch == x86_64 ]; then
			VMLINUX=arch/x86/boot/bzImage
		else echo "Unknown TARGET $_arch"; exit 1;
		fi

		local PATH="$srcdir/$(_musl_path $_arch)/bin:$PATH"
		cd $(_builddir $_arch linux-kernel)
		make CROSS_COMPILE=$(_cross_compile_target $_arch) \
			ARCH="$(_kernelarch $_arch)" \
			AWK="${AWK:-mawk}" \
			KBUILD_BUILD_VERSION="$version-PUI PUI!" \
			-j $(nproc)

		local artifactdir=$(_artifact $_arch)
		mkdir -p $artifactdir
		cp "$VMLINUX" "$artifactdir"
	done
}

build_initramfs() {
	unset LDFLAGS

	for _arch in $target_arch; do
		msg "Building $_arch busybox and initramfs"

		local _fsdir=$(_builddir $_arch fs)
		local _builddir=$(_builddir $_arch busybox)

		# Copy original fs to build target
		rm -rf $_fsdir
		cp -r "$srcdir"/fs $_fsdir
		mkdir -p "$_fsdir"/bin

		# Install apk.static binary to bin directory
		local _apk_tool_dir=$(_builddir $_arch apk_tool)
		install -Dm0755 "$_apk_tool_dir"/apk.static "$_fsdir"/bin

		# Make build directory
		rm -rf $_builddir
		mkdir -p $_builddir

		local PATH="$srcdir/$(_musl_path $_arch)/bin:$PATH"
		make -C "$srcdir"/busybox-$busyboxver \
			CROSS_COMPILE=$(_cross_compile_target $_arch) \
			O="$_builddir" \
			defconfig

		# Change workspace to busybox target directory
		cd $_builddir
		make CROSS_COMPILE=$(_cross_compile_target $_arch) \
			LDFLAGS="-static" \
			ARCH="$(_kernelarch $_arch)" \
			CONFIG_PREFIX="$_fsdir" || exit 1

		install -Dm0755 busybox "$_fsdir"/bin
		cd $_fsdir
		find . | cpio -o -H newc | gzip -9 > $(_artifact $_arch)/initramfs.cpio.gz
	done
}

download_apk() {
	for _arch in $target_arch; do
		local _apk_tool_dir=$(_builddir $_arch apk_tool)
		local _apk_tool_url="http://gitlab.alpinelinux.org/api/v4/projects/5/packages/generic/v2.12.10/$(uname -m)/apk.static"

		if ! [ -f "$_apk_tool_dir"/apk.static ]; then
			mkdir -p $_apk_tool_dir
			(cd $_apk_tool_dir && curl -OL $_apk_tool_url)
		fi
	done
}

updateconfigs() {
	for _arch in $target_arch; do
		msg "Update $name kernel config ($_arch)"
		local _config=$(_kconfig $_arch.config)
		local _builddir=$(_builddir $_arch linux-kernel)
		mkdir -p "$_builddir"
		local actions="listnewconfig oldconfig"
		if ! [ -f "$_builddir"/.config ]; then
			cp "$srcdir"/$_config "$_builddir"/.config
			actions="olddefconfig"
			env | grep ^CONFIG_ >> "$_builddir"/.config || true
		fi
		make -j1 -C "$srcdir"/linux-$kernver \
			O="$_builddir" \
			ARCH="$(_kernelarch $_arch)" \
			$actions savedefconfig

		cp "$_builddir"/defconfig "$srcdir"/$_config
	done
}



while getopts ':uhv' OPTION; do
	case "$OPTION" in
		u) updateconfigs || true; exit 0;;
		h) usage; exit 0;;
		v) echo "puipui-linux-tool $version"; exit 0;;
	esac
done

if ! [ -d linux-"$kernver" ]; then
	msg "Download linux kernel $kernver"
	fetch "https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${kernver}.tar.xz"
fi

if ! [ -d busybox-"$busyboxver" ]; then
	msg "Download busybox $busyboxver"
	fetch "https://busybox.net/downloads/busybox-${busyboxver}.tar.bz2"
fi


if ! [ -d $(_musl_path "aarch64") ]; then
	msg "Download aarch64-linux-musl"
	setup_musl_path "aarch64"
fi

if ! [ -d $(_musl_path "x86_64") ]; then
	msg "Download x86_64-linux-musl"
	setup_musl_path "x86_64"
fi

build_kern
download_apk
build_initramfs
